import { useState } from 'react'
import { motion } from 'framer-motion'
import { SteganographyService } from '../utils/steganography'
import { apiService } from '../services/api'

interface LoginModalProps {
  isOpen: boolean
  onClose: () => void
  onLoginSuccess: (userData: { email: string; name: string }) => void
}

export default function LoginModal({ isOpen, onClose, onLoginSuccess }: LoginModalProps) {
  const [memberCard, setMemberCard] = useState<File | null>(null)
  const [cardPreview, setCardPreview] = useState<string>('')
  const [pinCode, setPinCode] = useState(['', '', '', '', '', ''])
  const [isVerifying, setIsVerifying] = useState(false)
  const [error, setError] = useState<string>('')
  const [cardData, setCardData] = useState<{ email: string; name: string; pin: string } | null>(null)

  const handleCardUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      setMemberCard(file)
      setError('')
      setCardData(null)
      
      // Create preview URL
      const reader = new FileReader()
      reader.onload = async (event) => {
        if (event.target?.result) {
          const imageUrl = event.target.result as string
          setCardPreview(imageUrl)
          
          // Try to decode steganography data
          try {
            console.log('Checking member card for hidden data...')
            const hiddenData = await SteganographyService.decodeUserData(imageUrl)
            
            if (hiddenData) {
              console.log('Member card contains valid hidden data')
              setCardData(hiddenData)
              setError('')
            } else {
              console.warn('No hidden data found in member card')
              setError('Invalid member card. Please upload a valid member card generated by our system.')
            }
          } catch (decodeError) {
            console.error('Failed to decode member card:', decodeError)
            setError('Failed to read member card. Please try with a different image.')
          }
        }
      }
      reader.readAsDataURL(file)
    }
  }

  const handlePinChange = (index: number, value: string) => {
    if (value.length <= 1 && /^\d*$/.test(value)) {
      const newPin = [...pinCode]
      newPin[index] = value
      setPinCode(newPin)
      
      // Auto-focus next input
      if (value && index < 5) {
        const nextInput = document.getElementById(`login-pin-${index + 1}`)
        nextInput?.focus()
      }
    }
  }

  const handleLogin = async () => {
    const enteredPin = pinCode.join('')
    if (enteredPin.length !== 6) {
      setError('Please enter your complete 6-digit PIN')
      return
    }

    setIsVerifying(true)
    setError('')

    try {
      console.log('Verifying login with production backend...')

      // Prepare member card data for backend verification
      let memberCardDataForBackend = cardData

      // If no card data from steganography, try to extract from uploaded card
      if (!cardData && cardPreview) {
        console.log('No steganography data found, attempting backend login with card upload...')
        
        // For production, we'll need to upload the card to backend for processing
        // For now, we'll try with a minimal data structure
                 memberCardDataForBackend = {
           email: '', // Backend will need to extract this from card or use other identification
           name: '',
           pin: ''
         } as any // Type assertion for extended card data
      }

      if (!memberCardDataForBackend) {
        setError('Please upload a valid member card')
        return
      }

      // Use production backend authentication
      const loginResult = await apiService.loginUser(memberCardDataForBackend, enteredPin)

      if (loginResult.success) {
        console.log('Login successful with production backend!')
        console.log('User:', loginResult.user)
        
        // Call success callback
        onLoginSuccess({
          email: loginResult.user!.email,
          name: loginResult.user!.name
        })
        
        // Reset form
        resetForm()
        onClose()
      } else {
        console.error('Backend login failed:', loginResult.error)
        
        // Provide user-friendly error messages in Myanmar
        if (loginResult.code === 'INVALID_PIN') {
          setError('PIN မှားနေပါတယ်။ ပြန်စစ်ကြည့်ပါ။')
        } else if (loginResult.code === 'INVALID_CARD') {
          setError('Member card မမှန်ကန်ပါ။ ကျွန်ုပ်တို့ရဲ့ system က generate လုပ်ထားတဲ့ card သုံးပါ။')
        } else if (loginResult.code === 'INVALID_CREDENTIALS') {
          setError('Login အချက်အလက်တွေ မမှန်ကန်ပါ။')
        } else {
          setError('Login မအောင်မြင်ပါ။ ပြန်လုပ်ကြည့်ပါ။')
        }
      }
    } catch (error) {
      console.error('Login error:', error)
      setError('Network error ဖြစ်နေပါတယ်။ Internet connection စစ်ကြည့်ပြီး ပြန်လုပ်ကြည့်ပါ။')
    } finally {
      setIsVerifying(false)
    }
  }

  const resetForm = () => {
    setMemberCard(null)
    setCardPreview('')
    setPinCode(['', '', '', '', '', ''])
    setError('')
    setCardData(null)
  }

  const handleClose = () => {
    resetForm()
    onClose()
  }

  if (!isOpen) return null

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 z-50 flex items-center justify-center p-4"
      style={{
        background: 'linear-gradient(135deg, #000000 0%, #1a1a2e 25%, #16213e 50%, #0f0f23 75%, #000000 100%)'
      }}
    >
      {/* Animated background gradients */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-purple-500/20 to-pink-600/20 rounded-full blur-3xl animate-pulse" />
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-blue-500/20 to-cyan-500/20 rounded-full blur-3xl animate-pulse" />
      </div>

      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        className="relative w-full max-w-md mx-auto"
      >
        {/* Glass morphism card */}
        <div 
          className="relative backdrop-blur-xl bg-black/40 border border-white/10 rounded-2xl sm:rounded-3xl p-6 sm:p-8 shadow-2xl"
          style={{
            background: 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)',
            boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37), inset 0 1px 0 0 rgba(255,255,255,0.1)'
          }}
        >
          {/* Close button */}
          <button
            onClick={handleClose}
            className="absolute top-4 right-4 sm:top-6 sm:right-6 w-8 h-8 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors text-white/70 hover:text-white z-10"
          >
            <svg className="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>

          {/* Title */}
          <div className="text-center mb-6 sm:mb-8">
            <div className="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-blue-500/20 to-cyan-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-6 h-6 sm:w-8 sm:h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-4 0v2m4-2v2" />
                <circle cx="12" cy="12" r="2" fill="currentColor" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M8 16l1.5-1.5M16 16l-1.5-1.5" />
              </svg>
            </div>
            <h2 className="text-xl sm:text-2xl md:text-3xl font-semibold text-white mb-2">
              Member Card Login
            </h2>
            <p className="text-white/60 text-sm">
              ကျွန်ုပ်တို့ရဲ့ member card နဲ့ PIN code သုံးပြီး login ဝင်ပါ
            </p>
          </div>

          <div className="space-y-6">
            {/* Member Card Upload */}
            <div>
              <label className="block text-white/80 font-medium mb-3 text-sm">
                <span className="flex items-center space-x-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-4 0v2m4-2v2" />
                  </svg>
                  <span>Member Card</span>
                </span>
              </label>
              
              <div className="relative">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleCardUpload}
                  className="hidden"
                  id="member-card"
                />
                <label
                  htmlFor="member-card"
                  className="w-full min-h-[120px] border-2 border-dashed border-white/20 rounded-xl flex flex-col items-center justify-center cursor-pointer hover:border-white/40 transition-all bg-white/5"
                >
                  {cardPreview ? (
                    <div className="text-center">
                      <img 
                        src={cardPreview} 
                        alt="Member Card Preview" 
                        className="w-20 h-12 object-cover rounded-lg mx-auto mb-2"
                      />
                      <p className="text-white/80 text-sm">{memberCard?.name}</p>
                      {cardData && (
                        <p className="text-green-400 text-xs mt-1">✓ Valid member card detected</p>
                      )}
                    </div>
                  ) : (
                    <div className="text-center">
                      <svg className="w-8 h-8 text-white/50 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                      </svg>
                      <p className="text-white/60 text-sm">Upload your member card</p>
                    </div>
                  )}
                </label>
              </div>
            </div>

            {/* PIN Code Input */}
            {cardData && (
              <div className="space-y-4">
                <div className="text-center text-white/80 text-sm">Enter your 6-digit PIN</div>
                <div className="flex justify-center space-x-2">
                  {pinCode.map((digit, index) => (
                    <input
                      key={index}
                      id={`login-pin-${index}`}
                      type="password"
                      value={digit}
                      onChange={(e) => handlePinChange(index, e.target.value)}
                      className="w-12 h-12 text-center text-xl font-bold bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:border-purple-400 focus:bg-white/20 transition-all"
                      maxLength={1}
                      disabled={isVerifying}
                    />
                  ))}
                </div>
              </div>
            )}

            {/* Error message */}
            {error && (
              <div className="text-center">
                <p className="text-red-400 text-sm bg-red-500/10 border border-red-500/20 rounded-lg p-3">
                  {error}
                </p>
              </div>
            )}

            {/* Login Button */}
            <motion.button
              whileHover={(!isVerifying && cardData && pinCode.every(d => d !== '')) ? { scale: 1.02 } : {}}
              whileTap={(!isVerifying && cardData && pinCode.every(d => d !== '')) ? { scale: 0.98 } : {}}
              onClick={handleLogin}
              disabled={isVerifying || !cardData || !pinCode.every(d => d !== '')}
              className={`w-full py-4 text-base font-semibold rounded-xl transition-all flex items-center justify-center space-x-2 ${
                (!isVerifying && cardData && pinCode.every(d => d !== ''))
                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600 cursor-pointer' 
                  : 'bg-white/20 text-white/50 cursor-not-allowed'
              }`}
            >
              {isVerifying ? (
                <>
                  <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  <span>Verifying...</span>
                </>
              ) : (
                <span>Login</span>
              )}
            </motion.button>

            {/* Instructions */}
            <div className="text-center">
              <p className="text-xs text-white/60">
                Don't have a member card?{' '}
                <button
                  onClick={handleClose}
                  className="text-purple-400 hover:text-purple-300 transition-colors"
                >
                  Create Account
                </button>
              </p>
            </div>
          </div>
        </div>
      </motion.div>
    </motion.div>
  )
} 